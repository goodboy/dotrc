#!/bin/bash
#
# util funcs #{{{
ALL_OFF="$(tput sgr0)"
BOLD="$(tput bold)"
GREEN="${BOLD}$(tput setaf 2)"
YELLOW="${BOLD}$(tput setaf 3)"
RED="${BOLD}$(tput setaf 1)"
WHITE="${BOLD}$(tput setaf 7)"

err() {
  printf "${RED}Error: ${ALL_OFF}${1}\n" >&2
}

warn() {
  printf "${YELLOW}Warning: ${ALL_OFF}${1}\n" >&2
}

msg() {
  local mesg=$1; shift
  printf "${GREEN}==> ${WHITE}${mesg}${ALL_OFF}\n" "$*" >&2
} #}}}

root=$PWD  # must be the repo root dir
parentdir="dotrc"  # the sub-dir of config files/dirs

link() {
    local symlink="$2"
    [[ -z $2 ]] && symlink=".${1##*/}"  # if $2 is null then use .<filename>

    if [[ -e "$symlink" && ! -h "$symlink" ]]; then
        warn "$symlink already exists in filesystem, skipping..."
        return
    fi

    local sl_target=$(readlink -f $symlink)
    # if dir already exists then skip to next so we don't make a link to itself
    if [[ -d $sl_target ]]; then
        warn "$HOME/$symlink already links to dir '$sl_target', skipping..."
        return
    fi

    local target="$root/${parentdir}/${1}"
    ln -fs "$target" "$symlink"
    msg "linking $symlink -> $target"
}

# deploy scriptlets {{{1
dotfiles_bin()          { link bin bin;                         }
dotfiles_cower()        { link cower .config/cower;             }
dotfiles_dircolors()    { link dircolors/dircolors;             }
dotfiles_git()          { link git/gitconfig;                   }
dotfiles_gtk2()         { link gtk-2.0/gtkrc-2.0;               }
dotfiles_xonsh()        { link xonsh/xonshrc;                   }
#dotfiles_htop()        { link htop/htoprc;                     }
#dotfiles_lxdm()        { link lxdm/dmrc;                       }
#dotfiles_ncmpcpp()     { link ncmpcpp;                         }
#dotfiles_mutt()        { link mutt;                            }
#dotfiles_nethack()     { link nethack/nethackrc;               }
dotfiles_pam()          { link pam/pam_environment;             }
#dotfiles_pentadactyl() { link pentadactyl/pentadactylrc;       }
dotfiles_tmux()         { link tmux/tmux.conf;                  }
#dotfiles_weechat()     { link weechat;                         }
dotfiles_haskell()      { link haskell/haskeline;               }
dotfiles_ghci()         { link ghci/ghci;                       }
dotfiles_matplotlib()   { link matplotlib ~/.config/matplotlib; }
dotfiles_inputrc()      { link inputrc;                         }
dotfiles_i3()           { link i3;                              }
dotfiles_sway()         { link i3 .config/sway;                              }
dotfiles_termite()      { link termite .config/termite;         }
dotfiles_ranger()       { link ranger .config/ranger;           }
dotfiles_compton()      { link compton/compton.conf;            }
dotfiles_dunst()        { link dunst .config/dunst;             }
dotfiles_redshift()     { link redshift .config/redshift;       }

dotfiles_task() {
    link task/task
    link task/taskrc
}

dotfiles_vim() {
    link vim
    link vim/vimrc
    link vim/gvimrc
    link nvim .config/nvim
}

dotfiles_X() {
    link X/Xresources
    link X/xinitrc
    link X/Xmodmap
}

dotfiles_zsh() {
    link zsh/zshrc
    link zsh/zprofile
}
# }}}

usage() {
  cat << HERE
Automated deploy function for dotfile syncronization.

SUPPORTED:
HERE

for fun in $(compgen -A function dotfiles_); do
    echo "  ${fun#dotfiles_}"
done
exit ${1:-0}
}

deploy() {
    # go to $HOME and create links for each tool
    msg "deploying dotfiles for user '$(whoami)'"
    cd && msg "entered $PWD"

    while (( $# )); do
        dotfiles_${1#dotfiles_}
        if [[ $? == 127 ]]; then
            err "Don't know how to deploy \"$1\""
            usage >&2 1
        fi
        shift
    done
}

# main
if (( $# == 0 )); then
    [[ ! -d $parentdir ]] && { echo "E: this script must be run from repo base dir!"; exit 1; }
    deploy $(compgen -A function dotfiles_)
elif [[ "$1" == "--help" ]]; then
    usage 0
else
    deploy $*
fi
