#!/bin/bash
# taken from simon's dotfiles repository and modified

# MUST be the repo root dir
dotfiles=$PWD
parentdir="dotrc/"  # the sub-dir of config files

die() {
    echo >&2 "$1" && exit 1
}

link() {
    # file sys scope is $HOME...
    local parentdir="dotrc/"

    # get the filename to link
    [[ -z $2 ]] && sym_link=".${1##*/}" \
                || sym_link="${2:-$sym_link}"   # if $2 is null then use $1

    # if the file exists and not a sym link -> die
    if [[ -e "$sym_link" && ! -h "$sym_link" ]]; then
        die "$0: $sym_link exists in filesystem, stopping!"
    fi

    # 1) don't hide (i.e. '.' prefix) the bin dir in user's $HOME
    # 2) bin/ is in the repo root dir
    if [[ "$sym_link" == ".bin" ]]; then
        sym_link="${sym_link##.}"
        parentdir=""
    fi

    local sl_target=$(readlink -f $sym_link)
    # if dir already exists then skip to next so we don't make a link to itself
    if [[ -d $sl_target  ]]; then
        echo "$PWD/$sym_link already links to dir: '$sl_target', skipping..."
        return 0
    fi
    # if the sym_link is a dir remove it? shouldn't get here!?
    # if [[ -d "$sym_link" ]]; then
    #    echo "$sym_link is a directory removing..."
    #    rm "$sym_link"
    # fi

    local target="$dotfiles/${parentdir}${1}"
    ln -fs "$target" "$sym_link"
    echo "linking $sym_link -> $target"
}

# Deploy scriptlets {{{1
dotfiles_bin()          { link bin;                                     }
#dotfiles_cower()       { link cower .config/cower;                     }
dotfiles_dircolors()    { link dircolors/dircolors;                     }
dotfiles_git()          { link git/gitconfig;                           }
dotfiles_gtk2()         { link gtk-2.0/gtkrc-2.0;                       }
#dotfiles_htop()        { link htop/htoprc;                             }
#dotfiles_lxdm()        { link lxdm/dmrc;                               }
#dotfiles_ncmpcpp()     { link ncmpcpp;                                 }
#dotfiles_mutt()        { link mutt;                                    }
#dotfiles_nethack()     { link nethack/nethackrc;                       }
#dotfiles_pam()         { link pam/pam_environment;                     }
#dotfiles_pentadactyl() { link pentadactyl/pentadactylrc;               }
dotfiles_tmux()         { link tmux/tmux.conf;                          }
#dotfiles_weechat()     { link weechat;                                 }
#dotfiles_xmonad()      { link xmonad;                                  }
dotfiles_haskell()      { link haskell/haskeline;                       }
dotfiles_ghci()         { link ghci/ghci;                               }
dotfiles_matplotlib()   { link matplotlib ~/.config/matplotlib;         }
dotfiles_inputrc()      { link inputrc;                                 }
#dotfiles_termite()     { link termite/termite.cfg .config/termite.cfg; }

dotfiles_task() {
    link task/task
    link task/taskrc
}

dotfiles_vim() {
    link vim
    link vim/vimrc
    link vim/gvimrc
}

dotfiles_X() {
    link X/Xresources
    link X/xinitrc
    link X/Xmodmap
}

dotfiles_zsh() {
    link zsh/zshrc
    link zsh/zprofile
    link zsh/zsh_snippets
}
# }}}

usage() {
  cat << HERE
Automated deploy function for dotfile syncronization.

SUPPORTED:
HERE

for fun in $(compgen -A function dotfiles_); do
    echo "  ${fun#dotfiles_}"
done
exit ${1:-0}
}

deploy() {
    # go to $HOME and create links for each tool
    echo "deploying dotfiles for user '$(whoami)'"
    cd && echo -e "entered $PWD\n"

    while (( $# )); do
        dotfiles_${1#dotfiles_}
        if [[ $? == 127 ]]; then
            echo  >&2 "Error: don't know how to deploy \"$1\""
            usage >&2 1
        fi
        shift
    done
}

# start script
if (( $# == 0 )); then
    [[ ! -d $parentdir ]] && { echo "E: this script must be run from repo base dir!"; exit 1; }
    deploy $(compgen -A function dotfiles_)
elif [[ "$1" == "--help" ]]; then
    usage 0
else
    deploy $*
fi
