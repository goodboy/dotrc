# zsh config
autoload -U vcs_info  # init vcs helpers
autoload -U colors && colors
autoload zsh/terminfo

# Display settings - if not running interactively, don't do any of this
[[ $- != *i* ]] && return

# environment
export VISUAL='nvim'
export EDITOR='nvim'
export SYSTEMD_EDITOR='nvim'
export TERMINAL='alacritty'
export GREP_COLOR=$'4;1;31'
# prettify the sudo prompt
#export SUDO_PROMPT=$'\e[31mSUDO\e[m password for \e[34m%p\e[m: '
# append static paths
p=":${HOME}/.cabal/bin:"
# add script dirs
p+=":$(echo $HOME/bin/**/ | sed 's/\s\+/:/g')"
PATH+="$p"
export PATH

# ls colors
[[ -f ~/etc/dircolors/dircolors ]] && eval $(dircolors ~/etc/dircolors/dircolors)
[[ -f ~/.dircolors ]] && eval $(dircolors ~/.dircolors)

# Coloured man page support
# using 'less' env vars (format is '\E[<brightness>;<colour>m')
export LESS_TERMCAP_mb=$'\E[01;31m'     # begin blinking
export LESS_TERMCAP_md=$'\E[01;31m'     # begin bold
export LESS_TERMCAP_me=$'\E[0m'         # end mode
# seems to not work with alacritty
# export LESS_TERMCAP_so=$'\E[01;44;36m'  # begin standout-mode (bottom of screen)
export LESS_TERMCAP_se=$'\E[0m'         # end standout-mode
export LESS_TERMCAP_us=$'\E[00;36m'     # begin underline
export LESS_TERMCAP_ue=$'\E[0m'         # end underline

# export PAGER=vimpager

# history
HISTFILE=$HOME/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
HISTIGNORE=' '

# Options {{{
# history
setopt append_history
setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_verify
setopt inc_append_history
setopt share_history

# completion
zstyle :compinstall filename '$HOME/.zshrc'
autoload -Uz compinit && compinit  # init completion system
setopt always_to_end
setopt auto_menu
setopt auto_name_dirs
setopt auto_param_keys
setopt auto_param_slash
setopt auto_remove_slash
setopt complete_aliases
setopt complete_in_word
setopt list_ambiguous
setopt list_packed
unsetopt menu_complete

# changing directories
#setopt autocd
setopt autopushd
setopt cdable_vars
setopt chase_links
setopt pushd_ignore_dups
setopt pushd_silent
setopt pushd_to_home

# expansion and globbing
setopt braceccl
setopt extended_glob
setopt long_list_jobs
setopt multios
setopt prompt_subst
# setopt nomatch
# setopt notify

# input/output
setopt correct
setopt interactive_comments
setopt rc_quotes
setopt short_loops
unsetopt flowcontrol

# job control
setopt bg_nice

# turn off zle beep
unsetopt beep

# }}}

# Alias {{{
#alias ls='ls --classify --tabsize=0 --literal --color=auto --show-control-chars --human-readable --group-directories-first'
alias vim='nvim'
alias ls='ls -FNh --tabsize=0 --color=auto --show-control-chars --group-directories-first'
alias la='ls -a'
alias ll='ls -l'
alias lla='ll -a'
alias ip='ip -c'
alias grep='grep -n --color=auto'
alias less='less -R'
alias cower='cower --color=auto'
alias share='curl -F "sprunge=<-" http://sprunge.us | xclip'
alias matlab='matlab -nodesktop -nosplash'
alias console='cd ~/code/; tmux split-window -v; tmux resize-pane -D 10;'
alias hoogle='hoogle --color'
alias ssh='TERM=xterm ssh'
alias wanip='dig +short myip.opendns.com @resolver1.opendns.com'
alias buku='buku --suggest'
alias bs='firefox $(buku -p -f 10 | fzy)'

# real time process tree polling
ptwatch() {

    # TODO: multi parent/program support
    # htop -tp $(pgrep -d "," $1)
    # pids=$(pgrep -d ',' $1) | 

    pids=$(pgrep -f "$1" | head -n 1)
    watch -n 0.375 "pstree -astpn ${$(pgrep -f "$1" | head -n 1)}"

    # TODO: one-shot option
    # pstree -asdtpn "${pids}"
}
# }}}

# Widgets and Hooks {{{
function fancy-ctrl-z {
    # bg on empty line, push-input on non-empty line
    if [[ $#BUFFER -eq 0 ]]; then
        bg
        zle redisplay
    else
        zle push-input
    fi
}

# function zle-keymap-select {
#     # set vimode to current editing mode
#     vimode="${${KEYMAP/vicmd/C}/(main|viins)/}"
#     zle reset-prompt
# }

# Term repr {{{
[[ $TERM == xterm ]] && export TERM=xterm-256color
case $TERM in
    alacritty|termite*|vte*|xterm*|rxvt*)

        function precmd {
            # pre-prompt render hook
            echo  # add a new line to each output
            print -Pn '\e];%n@%m %~\a'
        }

        function preexec {
            local cmd=${1[(wr)^(*=*|sudo|ssh|-*)]}
            print -Pn "\e];$cmd:q\a"
        }
        ;;
    *)
        function precmd { echo; };;
esac
# }}}

# function precmd {
#     echo  # add a new line to each output
#     # update the xterm title with `username@hostname pwd`
#     case $TERM in
#         xterm*)
#             print -Pn "\e]0;%n@%m: %~\a";;
#     esac
# }

# RPROMPT="%{$reset_color%}[%{$fg[green]%}%~%{$reset_color%}]"
function set_rprompt {
    # right prompt draw hook
    local pmt="red"
    (( EUID == 0 )) && pmt="blue"
    [[ -n $SSH_CONNECTION ]] && pmt="magenta"
    # RPROMPT="%{$reset_color%}%(?/${at_normal}/${fg_red})%%${at_normal}"
    RPROMPT='$(vcs_info_wrapper)'
    # RPROMPT+="%c \${vcs_info_msg_0_}"
    # RPROMPT+='%{$fg[yellow]%}%(?.. %?)%{$reset_color%}'
    # RPROMPT+='%{$fg[red]%} ${vimode} %{$reset_color%}'
}
set_rprompt
unset set_rprompt

function vcs_info_wrapper {
   # render and print vcs line
   vcs_info
   [[ -n "$vcs_info_msg_0_" ]] && echo " %{$fg[gray]%}${vcs_info_msg_0_/ /}%{$reset_color%}"
}

# use cursor as indicator of vi mode
# (urxvt and family accepts even #RRGGBB)
INSERT_PROMPT="gray"
COMMAND_PROMPT="red"

# helper for setting color including all kinds of terminals
set_prompt_color() {
    if [[ $TERM = "linux" ]]; then
        # nothing
    elif [[ $TMUX != '' ]]; then
        printf '\033Ptmux;\033\033]12;%b\007\033\\' "$1"
    else
        echo -ne "\033]12;$1\007"
    fi
}

# change cursor color based on vi mode
zle-keymap-select () {
    if [ $KEYMAP = vicmd ]; then
        set_prompt_color $COMMAND_PROMPT
    else
        set_prompt_color $INSERT_PROMPT
    fi
}

zle-line-finish() {
    set_prompt_color $INSERT_PROMPT
}

zle-line-init () {
    zle -K viins
    set_prompt_color $INSERT_PROMPT
}

# Show "waiting dots" while something tab-completes
expand-or-complete-with-dots() {
    echo -n "\e[31m...\e[0m"
    zle expand-or-complete
    zle redisplay
}

# create/override widgets
zle -N fancy-ctrl-z
zle -N zle-keymap-select
zle -N zle-line-init
zle -N zle-line-finish
zle -N expand-or-complete-with-dots

# smart urls
autoload -U url-quote-magic
zle -N self-insert url-quote-magic

# }}}

# Bindkeys {{{
# make zsh/terminfo work for terms with application and cursor modes
case "$TERM" in
  vte*|xterm*)
    zle-line-init()   { zle-keymap-select; echoti smkx }
    zle-line-finish() { echoti rmkx }
    zle -N zle-line-init
    zle -N zle-line-finish
    ;;
esac

# use vi keymap and bind 'main' to it (so we're modifying 'main')
bindkey -v

# do history expansion on space
bindkey ' ' magic-space

# map tab key to show red dots on completion wait
bindkey "^I" expand-or-complete-with-dots
# bindkey "\b" vi-backward-delete-char

# shift-tab to reverse direction in menu
if [[ -n $terminfo[kcbt] ]]; then
  bindkey "$terminfo[kcbt]" reverse-menu-complete
fi

# do history expansion on space
bindkey ' ' magic-space

# delete
if [[ -n $terminfo[kdch1] ]]; then
  bindkey "$terminfo[kdch1]" delete-char
  bindkey -M vicmd "$terminfo[kdch1]" vi-delete-char
fi

# insert
if [[ -n $terminfo[kich1] ]]; then
  bindkey "$terminfo[kich1]" overwrite-mode
  bindkey -M vicmd "$terminfo[kich1]" vi-insert
fi

# home
if [[ -n $terminfo[khome] ]]; then
  bindkey "$terminfo[khome]" vi-beginning-of-line
  bindkey -M vicmd "$terminfo[khome]" vi-beginning-of-line
fi

# end
if [[ -n $terminfo[kend] ]]; then
  bindkey "$terminfo[kend]" vi-end-of-line
  bindkey -M vicmd "$terminfo[kend]" vi-end-of-line
fi

# backspace (and <C-h>)
if [[ -n $terminfo[kbs] ]]; then
  bindkey "$terminfo[kbs]" backward-delete-char
  bindkey -M vicmd "$terminfo[kbs]" backward-char
fi

bindkey '^H' backward-delete-char
bindkey -M vicmd '^H' backward-char

# page up (and <C-b> in vicmd)
if [[ -n $terminfo[kpp] ]]; then
  bindkey "$terminfo[kpp]" beginning-of-buffer-or-history
  bindkey -M vicmd "$terminfo[kpp]" beginning-of-buffer-or-history
fi

bindkey -M vicmd '^B' beginning-of-buffer-or-history

# page down (and <C-f> in vicmd)
if [[ -n $terminfo[knp] ]]; then
  bindkey "$terminfo[knp]" end-of-buffer-or-history
  bindkey -M vicmd "$terminfo[knp]" end-of-buffer-or-history
fi

bindkey -M vicmd '^F' end-of-buffer-or-history

# up arrow (history search)
if [[ -n $terminfo[kcuu1] ]]; then
  bindkey "$terminfo[kcuu1]" history-beginning-search-backward
  bindkey -M vicmd "$terminfo[kcuu1]" history-beginning-search-backward
fi

bindkey '^[[A' history-beginning-search-backward

# down arrow (history search)
if [[ -n $terminfo[kcud1] ]]; then
  bindkey "$terminfo[kcud1]" history-beginning-search-forward
  bindkey -M vicmd "$terminfo[kcud1]" history-beginning-search-forward
fi

bindkey '^[[B' history-beginning-search-forward

# left arrow (whichwrap)
if [[ -n $terminfo[kcub1] ]]; then
  bindkey "$terminfo[kcub1]" backward-char
  bindkey -M vicmd "$terminfo[kcub1]" backward-char
fi

# right arrow (whichwrap)
if [[ -n $terminfo[kcuf1] ]]; then
  bindkey "$terminfo[kcuf1]" forward-char
  bindkey -M vicmd "$terminfo[kcuf1]" forward-char
fi

# shift-left
if [[ -n $terminfo[kLFT] ]]; then
  bindkey "$terminfo[kLFT]" vi-backward-word
  bindkey -M vicmd "$terminfo[kLFT]" vi-backward-word
fi

# shift-right
if [[ -n $terminfo[kRIT] ]]; then
  bindkey "$terminfo[kRIT]" vi-forward-word
  bindkey -M vicmd "$terminfo[kRIT]" vi-forward-word
fi

# ctrl-left
bindkey '^[[1;5D' vi-backward-blank-word
bindkey '^[[1;5C' vi-forward-blank-word
bindkey '^i' expand-or-complete-prefix
bindkey '^W' backward-kill-word

bindkey -M vicmd 'h' backward-char
bindkey -M vicmd 'l' forward-char
bindkey -M vicmd '^R' redo
bindkey -M vicmd 'u' undo
bindkey -M vicmd 'ga' what-cursor-position

# fancy <C-z>
bindkey '^Z' fancy-ctrl-z
bindkey -M vicmd '^Z' fancy-ctrl-z

# buffer stack access
bindkey '^w' push-line
bindkey '^e' get-line

# hist searching in both the viins and vicmd keymaps
bindkey -M viins '^r' history-incremental-search-backward
bindkey -M vicmd '^r' history-incremental-search-backward
# }}}

# Zstyle {{{
_force_rehash() {
  (( CURRENT = 1 )) && rehash
  return 1
}

zstyle ':completion::complete:*' use-cache on

# Group matches and describe.
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format '%B%F{green}>> %d (errors: %e)%f%b'
zstyle ':completion:*:descriptions' format '%B%F{magenta}>> %d%f%b'
zstyle ':completion:*:messages' format '%B%F{cyan}>> %d%f%b'
zstyle ':completion:*:warnings' format '%B%F{red}>> no matches found%f%b'
zstyle ':completion:*:default' list-prompt '%B%S%M matches%s%b'
zstyle ':completion:*' format '%B%F{cyan}>> %d%f%b'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' completer _oldlist _expand _force_rehash _complete _match _approximate
zstyle ':completion:*' menu select=2

zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

zstyle ':completion:*:*:*:users' ignored-patterns \
                                           bin daemon mail ftp http nobody dbus avahi named git bitlbee mpd \
                                           rtkit ntp usbmux gdm
# vcs settings
zstyle ':vcs_info:*' enable git cvs svn
zstyle ':vcs_info:*' actionformats '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '
zstyle ':vcs_info:*' formats '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{5}]%f '
zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'
# zstyle ':vcs_info:*' stagedstr "${fg_blue}?"
# zstyle ':vcs_info:*' unstagedstr "${fg_brown}?"
# zstyle ':vcs_info:*' check-for-changes true
# zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{11}%r'
# zstyle ':vcs_info:*' enable git svn

# Commands {{{
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
zstyle ':completion:*' squeeze-slashes true

# vim zstyle
zstyle ':completion:*:*:(vim|gvim):*:*files' ignored-patterns '*~|*.(old|bak|o|hi)'
zstyle ':completion:*:*:(vim|gvim):*:*files' file-sort modification
zstyle ':completion:*:*:(vim|gvim):*' file-sort modification
zstyle ':completion:*:*:(vim|gvim):*' tag-order files

# kill zstyle
zstyle ':completion:*:*:kill:*' command 'ps -e -o pid,%cpu,tty,cputime,cmd'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:kill:*' insert-ids single

# man
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true

# ssh/scp/rsync
zstyle ':completion:*:(scp|rsync):*' tag-order 'hosts:-host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
zstyle ':completion:*:(scp|rsync):*' group-order files all-files hosts-domain hosts-host hosts-ipaddr
zstyle ':completion:*:ssh:*' tag-order 'hosts:-host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
zstyle ':completion:*:ssh:*' group-order hosts-domain hosts-host users hosts-ipaddr
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-host' ignored-patterns '*.*' loopback localhost
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-domain' ignored-patterns '<->.<->.<->.<->' '^*.*' '*@*'
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-ipaddr' ignored-patterns '^<->.<->.<->.<->' '127.0.0.<->'
# }}}
# }}}

# left prompt
PROMPT="%{$fg[green]%} >>> %{$reset_color%}"

# fish-like syntax highlighting as per:
# https://wiki.archlinux.org/index.php/zsh#Fish-like_syntax_highlighting
flsh="/usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
[[ -f $flsh ]] && source $flsh

scriptsdir="$HOME/etc/bin"
# [[ -d $scriptsdir ]] && source "$scriptsdir/xps_screen_fix.sh"

# # Setup zsh-autosuggestions
# source /home/tyler/.zsh-autosuggestions/autosuggestions.zsh

# # Enable autosuggestions automatically
# zle-line-init() {
#     zle autosuggest-start
# }

# zle -N zle-line-init

# # use ctrl+t to toggle autosuggestions(hopefully this wont be needed as
# # zsh-autosuggestions is designed to be unobtrusive)
# bindkey '^T' autosuggest-toggle
