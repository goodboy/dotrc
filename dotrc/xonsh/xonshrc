# vim: ft=python
import builtins
import json
from os import path
from pathlib import Path
from pprint import pprint

import pdbp
import toml
import tomlkit
import msgspec

# import pdbpp
from xonsh.prompt import vc
from xonsh.events import events
from prompt_toolkit.keys import Keys
from prompt_toolkit.filters import (
    Condition,
    ViInsertMode,
)
# from xonsh.prompt.gitstatus import GitStatus, get_gitstatus_info
# from prompt_toolkit.key_binding import vi_state
# from prompt_toolkit.keys import Keys
from prompt_toolkit import filters

# xontribs
# TODO: figure out how to install these correctly..
# - xontrib load prompt_ret_code pacman_tabcomplete vox_tabcomplete vox
# - xontrib load xxh
xontrib load vox

# import from external xontribs likely ones i maintain B)
# xontrib load -f cornerboi.lnstore
xontrib load -v gish lnstore

# UX + style customizations
$MULTILINE_PROMPT = '{GREEN}...:'  # copy ipython
$XONSH_SHOW_TRACEBACK = True
$XONSH_STORE_STDOUT = True
$XONSH_COLOR_STYLE = 'default'
$XONSH_DEBUG = 0
$XONSH_SHOW_TRACEBACK = True

# REPL conf
$VI_MODE = True
$SHELL_TYPE = 'prompt_toolkit'
$SHELL = 'xonsh'
$AUTO_PUSHD = True
$UPDATE_PROMPT_ON_KEYPRESS = False

$EDITOR='nvim'
$BROWSER='firefox'
$SYSTEMD_EDITOR='nvim'
$PAGER='less'


# add custom home/etc and .local/bin/ to path
$PATH.extend([
    str($HOME / Path('etc/bin')),  # personal dotfiles scripts
    str($HOME / Path('.local/bin')),  # for rustup
])


aliases.update({
    'grep': 'grep -n --color=auto',
    'ip': 'ip -c',
    'la': "ls -a",
    'less': 'less -R',
    'll': "ls -l",
    'lla': "ls -la",
    'ls': "ls -FNh --tabsize=0 --color=auto --show-control-chars --group-directories-first",
    'wanip': 'dig +short myip.opendns.com @resolver1.opendns.com',
    'vim': 'nvim',
    'smbz': "espeak-ng 'meh lahh pelaas'",

    # custom ad-hoc thingers..
    # 'gish': _gh_edit_issue_body,
    'pikerup': 'cd $HOME/repos/piker; vox activate piker310',
    # 'urldump': _urls_to_lj,
    'gomuks': 'cd $HOME/repos/gomuks; ./gomuks',
    'wm-spawn': 'i3-msg exec "alacritty -e $1"',

    # ext mouse, bump up that speeeed
    'fast_mouse': 'xinput --set-prop 10 "libinput Accel Speed" 1',

})
# faster completion to "ipy<tab>thon"
aliases.pop('ipynb')

# Coloured man page support
# using 'less' env vars (format is '\E[<brightness>;<colour>m')
# $LESS_TERMCAP_mb = "\033[01;31m"     # begin blinking
# $LESS_TERMCAP_md = "\033[01;31m"     # begin bold
# $LESS_TERMCAP_me = "\033[0m"         # end mode
# $LESS_TERMCAP_so = "\033[01;44;36m"  # begin standout-mode (bottom of screen)
# $LESS_TERMCAP_se = "\033[0m"         # end standout-mode
# $LESS_TERMCAP_us = "\033[00;36m"     # begin underline
# $LESS_TERMCAP_ue = "\033[0m"         # end underline


# def prompt():
#     """Auto update the prompt and cursor colour.
#     """
#     # import pdb; pdb.set_trace()
#     cli = builtins.__xonsh_shell__.shell.prompter.cli
#     if cli:
#         mode = cli.vi_state.input_mode
#         # print("MODE {}".format(mode))
#         if mode == vi_state.InputMode.INSERT:
#             print('\033]12;gray\007')
#             # print("INSERTING")
#             # printf '\033]12;gray\007'
#         else:
#             print('\033]12;red\007')
#             # print("NOT INSERT")
#             # printf '\033]12;red\007'

#     return '\n' + '{env_name:{}}' + ' {GREEN}>>> '


# $PROMPT = prompt
$PROMPT = '\n' + '{env_name:{}}' + ' {GREEN}>>>{DEFAULT} '
# $PROMPT = '{env_name:{}}' + ' {GREEN}>>> '

# gray cursor
# print('\033]12;gray\007')

def maybe_show_vc() -> str:
    '''
    Version control display helper that only shows the branch
    when a vcs is detected.

    '''
    branch = vc.current_branch()
    if not branch:
        return ''

    # dirty = vc.git_dirty_working_directory()
    # ops = gitstatus.get_operations()
    # $PROMPT_FIELDS

    return f'git:{branch}'


$PROMPT_FIELDS['maybe_show_vc'] = maybe_show_vc
# $PROMPT_FIELDS['branch_color'] = lambda: (
#     '{RED}' if vc.git_dirty_working_directory() else '{RESET}'
# )

$TITLE = '{current_job:{} | }{user}@{hostname}: {cwd} {maybe_show_vc}'

# $RIGHT_PROMPT = rprompt
# $BOTTOM_TOOLBAR = rprompt

# namespace bookkeeping
_new = set()


def ctxdiff(
    now,
    start,
    remove,

) -> None:
    new = now - start - remove
    return {k: now[k] for k in new}

    diff = ctxdiff(
        __xonsh__.ctx,
        __xonsh__.ctx['_startctx'],
        {'_startctx', '__name__'},
    )
    _new.update(diff.keys())
    for k, v in diff.items():
        print('{} {}: {}'.format(type(v), k, v))


def clear(args, stdin=None):
    global _new
    for k in _new:
        __xonsh_ctx__.pop(k)
    _new = set()


aliases['ns'] = ctxdiff
aliases['cns'] = clear
_startctx  = __xonsh__.ctx.copy()


# UX related custom key bindings
@events.on_ptk_create
def custom_keybindings(
    bindings,
    **kw
):
    @bindings.add(Keys.ControlSpace)
    def fill_suggestion(event):
        '''
        Allow ctl-space to trigger auto-suggestion like
        c-e and c-f does; except easier to type quick when
        already typing commands with spaces.


        '''
        suggestion = event.current_buffer.suggestion
        if suggestion:
            event.current_buffer.insert_text(suggestion.text)


# @events.on_ptk_create
    # # @handler(Keys.Escape, filter=filters.app.vi_insert_mode)
    # @handler(Keys.Escape, filter=filters.ViInsertMode())
    # # @handler(Keys.Any, filter=filters.Vi())
    # def duhh(event):
    #     """Allow ctl-space to trigger auto-suggestion like -> would.
    #     """
    #     event.cli.output.write_raw('\x1b]12;{}\x07'.format('red'))
    #     event.cli.output.write_raw('\x1b]12;{}\x07'.format('red'))

    #     # mode = event.cli.vi_state.input_mode
    #     # buffer = event.cli.current_buffer
    #     # import pdb; pdb.set_trace()
    #     # # print("MODE {}".format(mode))
    #     # if mode == vi_state.InputMode.INSERT:
    #     #     # print("INSERTING")
    #     #     print('\033]12;gray\007')
    #     #     # printf '\033]12;gray\007'
    #     # else:
    #     # elif mode == vi_state.InputMode.EDIT:
    #     # print('\033]12;red\007')
    #         # print("NOT INSERT")
    #         # printf '\033]12;red\007'

    #     # event.cli.renderer.erase()

    #     # print("event")
    #     # print('\033]12;red\007')
    #     # print('\033]12;gray\007')
    #     # event.cli.editting_mode == 
    #     # if suggestion:
    #     # event.current_buffer.insert_text('\033]12;red\007')

    # @handler('a', 'i', filter=filters.ViNavigationMode())
    # # @handler(Keys.Any, filter=filters.Vi())
    # def yup(event):
    #     """Allow ctl-space to trigger auto-suggestion like -> would.
    #     """
    #     event.cli.output.write_raw('\x1b]12;{}\x07'.format('grey'))

    # # import pdb; pdb.set_trace()
