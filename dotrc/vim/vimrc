" File:     ~/.vimrc
" Author:   Tyler Goodlet
" ------------------------

set nocompatible
filetype off

" Auto-install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')

" Plugin List
Plug 'AndrewRadev/linediff.vim'
Plug 'VundleVim/Vundle.vim'
Plug 'bling/vim-airline'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'dag/vim2hs'
" Plug 'ervandew/supertab'
Plug 'godlygeek/tabular'
Plug 'inside/vim-grep-operator'
Plug 'plasticboy/vim-markdown'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tsaleh/vim-tmux'
Plug 'chrisbra/csv.vim', {'for': 'csv'}
Plug 'nanotech/jellybeans.vim'
" Plug 'tweekmonster/braceless.vim'
Plug 'FelikZ/ctrlp-py-matcher'
Plug 'jaxbot/semantic-highlight.vim'
Plug 'Valloric/ListToggle'
" Plug 'szw/vim-tags'
Plug 'editorconfig/editorconfig-vim'
Plug 'saltstack/salt-vim'
Plug 'fatih/vim-go'
Plug 'tshirtman/vim-cython'
Plug 'rust-lang/rust.vim'
Plug 'zchee/deoplete-jedi'
Plug 'jaxbot/semantic-highlight.vim'
Plug 'neomake/neomake'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'cespare/vim-toml'
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

" Initialize plugin system
call plug#end()

colorscheme jellybeans

" GENERAL {{{1
" -----------------------------

" formatting
set tabstop=4
set shiftwidth=4
"set softtabstop=2
set cinoptions=(0
set autoindent
set linebreak
set nolist
set nowrap
set textwidth=72
set wrapmargin=0
set formatoptions=qn1
" Don't insert comment leader when using 'o' or 'O'
autocmd BufNewFile,BufRead * setlocal formatoptions-=o


" searching
set hlsearch
set smartcase
set incsearch

" editing
set list listchars=tab:\ \ ,extends:$,precedes:^,trail:-
set nrformats+=alpha

" folding
set foldenable
set foldmethod=marker
set foldmarker={{{,}}}
set foldcolumn=1
set backspace=indent,eol,start

" spelling
set spelllang=en_ca
set spellfile=~/.vim/dict.add

" vim ui
set autoread
set autowrite
set showcmd
set title
set ruler
set number
set cursorline
set shortmess=at
set hidden
set laststatus=2
set scrolloff=2
set wildmenu wildmode=list:longest,full
set completeopt=longest,menuone
set history=50
set confirm
set equalalways

if has('mouse')
  set mouse=a
endif

set wildignore+=.hg,.git,.svn                  " version control
set wildignore+=*.aux,*.out,*.toc              " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg " images files
set wildignore+=*.a,*.o,*.obj,*.so,*.hi        " compiled object files
set wildignore+=*.pyc                          " python byte code
set wildignore+=*.spl                          " compiled spell lists

" backup
set backup
set backupdir=~/.vim/backups
set dir=~/.vim/tmp
set undofile
set undodir=~/.vim/undo

" path
set path=.,,/usr/include,/usr/lib

" shell
set shell=/bin/bash


" AUTOCMDS  {{{1
" ----------------------------
autocmd VimResized * execute "normal! \<c-w>="
autocmd BufWritePre * if ! &bin | silent! :call spaces#StripTrailing()<CR>
autocmd BufWritePost * if getline(1) =~ "^#!" | execute 'silent :!chmod +x <afile>' | endif

" CUSTOM COMMANDS {{{1
" ----------------------------
" command -range=% Share :<line1>,<line2>write !curl -F "sprunge=<-" http://sprunge.us|xclip

" MAPPINGS {{{1
" ----------------------------

" for common typos
command! Q q
command! W w
command! Qa qa
command! Wq wq
command! Wa wa
command! Wqa wqa

command! Ww w !wc -w

" sane j k actions
nnoremap j gj
nnoremap k gk

" map Y to act like D and C; yank till end of line
map Y y$

" shortcut to update diff
nnoremap <silent> <leader>d :diffupdate<CR>
nnoremap <silent> <leader>h :nohl<CR>
nnoremap <silent> <leader>b :ls<CR>:b<space>
nnoremap <silent> <leader>s :setl spell!<CR>
nnoremap <silent> <leader>w :call spaces#StripTrailing()<CR>

" window movements
nmap <silent> <C-H> :winc h<CR>
nmap <silent> <C-J> :winc j<CR>
nmap <silent> <C-K> :winc k<CR>
nmap <silent> <C-L> :winc l<CR>

" map space to create/open/close fold
nnoremap <silent> <Space> @=(foldlevel('.')?'za':'l')<CR>
vnoremap <Space> zf

" changing dictionaries
command! Fr setl spelllang=fr
command! En setl spelllang=en_ca
command! Sl setl spelllang=sl

" bindings for building code
nnoremap <F5>   :make<CR>
nnoremap <S-F6> :!./"%"<CR>

" ctags
map <f12> :!ctags -R .<cr>
" https://www.fusionbox.com/blog/detail/navigating-your-django-project-with-vim-and-ctags/590/
map <f10> :!ctags -R --fields=+l --languages=python --python-kinds=-iv -f ./tags ./ $(python -c "import os, sys; print(' '.join('{}'.format(d) for d in sys.path if os.path.isdir(d)))")<cr>

" sudo write
cmap w!! w !sudo tee > /dev/null %


" PLUGINS CONFIG {{{1
" ----------------------------
" set vim to download files with curl
let g:netrw_http_cmd  = "curl"
let g:netrw_http_xcmd = "-so"

" airline
let g:airline#extensions#tabline#enabled = 1

" snippets config
let snips_author = 'Tyler Goodlet'
let snips_email  = 'tgoodlet@gmail.com'

" NERDTree
let g:NERDTreeChDirMode     = 2
let g:NERDTreeIgnore        = ['\~$', '\.swp$', '\.o$', '\.hi$', '\.pyc$', '\.pyo$']
let g:NERDTreeSortOrder     = ['^__\.py$', '\/$', '*', '\~$']
let g:NERDTreeShowBookmarks = 1
let g:NERDTreeMinimalUI     = 1
nnoremap <silent> <leader>t :NERDTreeToggle<CR>
nnoremap <silent> <leader>f :NERDTreeFind<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" SuperTab
let g:SuperTabDefaultCompletionType = "context"

" fugative
nnoremap <silent> <leader>gd :Gdiff<cr>
nnoremap <silent> <leader>ge :Gedit<cr>
nnoremap <silent> <leader>gb :Gbrowse<cr>
nnoremap <silent> <leader>gs :Gstatus<cr>

" grep-operator
set grepprg=git\ grep\ -n\ $*
let g:grep_operator_set_search_register = 1
nmap <leader>g <Plug>GrepOperatorOnCurrentDirectory
vmap <leader>g <Plug>GrepOperatorOnCurrentDirectory
nmap <leader><leader>g <Plug>GrepOperatorWithFilenamePrompt
vmap <leader><leader>g <Plug>GrepOperatorWithFilenamePrompt

" syntastic
let g:syntastic_mode_map = {'mode': 'passive'} ",
nnoremap <silent> <leader>e :Errors<CR>
nnoremap <silent> <leader>c :SyntasticCheck<CR>

" tabular config
nnoremap <silent> <leader>== :Tabular /=<CR>

" HASKELL :
" consider making the function assigned to a vimscript variable
" au Filetype haskell nnoremap <silent> <Leader>d :!~/etc/bin/splitwin.sh hoogle -i <cword><CR>:redraw<CR>

" vim2hs
let g:haskell_conceal_wide = 1
let g:hpaste_author = 'Tyler'
let g:haskell_tabular = 1
let g:haskell_autotags = 0
au Filetype cabal nnoremap <buffer> <silent> <Leader>t: :Tabularize colon<CR>

" ctrl-p
nmap <C-@> :CtrlPLine<cr>
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_user_command = {
\ 'types': {
    \ 1: ['.git', 'cd %s && git ls-files -co --exclude-standard'],
    \ 2: ['.hg', 'hg --cwd %s locate -I .'],
    \ },
\ 'fallback': 'find %s -type f'
\ }

let g:ctrlp_extensions = ['mixed', 'line']
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(exe|so|dll)$',
    \ 'link': 'some_bad_symbolic_links',
\ }

let g:ctrlp_buftag_types = {
\ 'python': '--fields+=l --language-force=pyton --python-kinds=-iv',
\ 'erlang': '--language-force=erlang --erlang-types=drmf',
\ 'javascript' : {
  \ 'bin': 'jsctags',
  \ 'args': '-f -',
  \ },
\ }

" cython
let tlist_pyrex_settings='python;c:classe;m:memder;f:function'

" Do not clear filenames cache, to improve CtrlP startup
let g:ctrlp_clear_cache_on_exit = 0

" Set no file limit, we are building a big project
let g:ctrlp_max_files = 0

" PyMatcher extension
if !has('python') && !has('nvim')
    echo 'In order to use pymatcher plugin, you need +python compiled vim'
else
    let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
endif

" braceless
" autocmd FileType python,lua,haml,yaml,coffee,sls BracelessEnable +indent +fold +highlight

" deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#max_list = 10
set completeopt-=preview " suppress annoying 'help'
let g:python3_host_prog = '/usr/bin/python3'
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

" language server mappings thanks to @dtkerr
" TODO:
" - server won't start if buffer is empty / file dne
" - how do selection based auto-format like F2 below?
" set signcolumn=yes
" let g:LanguageClient_serverCommands = {
"   \ 'python': ['pyls'],
"   \ }
  " \ 'rust': ['rustup', 'run', 'stable', 'rls'],
  " \ 'python': ['~/.local/virtualenvs/python-language-server-3m3qmq0i/bin/pyls'],
  " \ 'javascript': ['~/.local/npm/bin/javascript-typescript-stdio'],
  " \ 'json': ['~/.local/npm/bin/json-languageserver', '--stdio'],
  " \ 'html': ['~/.local/npm/bin/html-languageserver', '--stdio'],
  " \ 'css': ['~/.local/npm/bin/css-languageserver', '--stdio'],
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_formatting()<CR>
nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gr :call LanguageClient_textDocument_references()<CR>:lopen<CR>
" let g:LanguageClient_loggingLevel = 'DEBUG' " Use highest logging level
